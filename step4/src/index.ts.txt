// enum StatusStudent {
//   enrollee,
//   student,
//   graduate,
//   bachelor,
// }
enum StatusStudent {
  enrollee = 'enrollee',
  student = 'student',
  graduate = 'graduate',
  bachelor = 'bachelor',
}

class APerson {
  age?: number;

  constructor(public readonly name: string, age?: number){
    this.age = age
  }

  method(s: string){
    return 'APerson ' + s + " ok"
  }
}

// —Ç–∏–ø—ã —Å–≤–æ–π—Å—Ç–≤
// public - –¥–æ—Å—Ç—É–ø–Ω–æ –≤–µ–∑–¥–µ; protected - –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–∞–º–æ–º –∫–ª–∞—Å—Å–µ –∏ –¥–æ—á–µ—Ä–Ω–∏—Ö; private - –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Å–∞–º–æ–≥–æ –∫–ª–∞—Å—Å–∞;
// private –ø–æ—è–≤–∏–ª–∞—Å—å –∏ –≤ JS - —Ç–∞–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å #
class Student extends APerson {
  id: string;
  status: StatusStudent = StatusStudent.enrollee;
  name: string;
  course?: string;
  _module: number = 0;
  createAt?: Date;
  updateAt?: Date;
  // _module?: number; –º–æ–∂–Ω–æ —Ç–∞–∫  —á—Ç–æ–± –Ω–µ —Ä—É–≥–∞–ª–æ—Å—å
  // _module!: number; –º–æ–∂–Ω–æ —Ç–∞–∫ –æ–ø–∏—Å–∞—Ç—å —á—Ç–æ–± –Ω–µ —Ä—É–≥–∞–ª–æ—Å—å
  // –º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å üëá  –∏ —Ç–æ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∞
  // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */

  static get rndId(): string {
    return Math.random().toString(32).substring(2, 6) + Date.now().toString().substring(9)
  }

  static { // —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –±–ª–æ–∫ –∫–æ–¥–∞. –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å–∞–º –∫–ª–∞—Å—Å. –Ω–µ –æ–±—ä–µ–∫—Ç—ã
    console.log('class Student init-----------');
    
  }

  override method(s: string){
    return 'Student ' + s + " ok" + ' -- ' + super.method(s)
  }

  constructor(name: string);
  constructor(name: string, course: string);
  constructor(name: string, course?: string) {
    super(name)
    this.name = name
    if(course){
      this.course = course
    }
    this.id = Student.rndId; // Math.random().toString(32).substring(2, 6) + Date.now().toString().substring(9)
  }
  getInfo(): string {
    return `id:${this.id} student:'${this.name}' on [${this.course}] module: ${this._module}`
  }
  get info(): string {
    return this.getInfo()
  }

  set module(module: number) {
    this._module = module
  }
  get module(): number {
    return this._module
  }

  // –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–¥–∞ changeInfo
  changeInfo(course: string): void;
  changeInfo(module: number): void;
  changeInfo(course: string, module: number): void;
  changeInfo(courseOrModule: string | number, module?: number): void {
    if(typeof courseOrModule === 'string'){
      this.course = courseOrModule
      if(module) this.module = module
    } else { // number
      this.module = courseOrModule
    }
  }

}

const person1 = new APerson('pedro')
const person2 = new APerson('gonzales', 22)
console.log(person1, person2)

const student = new Student('dim', 'front')
student.module = 4
console.log(student)
console.log(student.info)

console.log(student.method('aaaaaaaaaaaaaaaa'))


// node dist/index.js